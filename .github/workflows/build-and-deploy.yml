name: Build & Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-web:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true  # pulls jobs_seed.json etc.

      - uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push web image
        uses: docker/build-push-action@v5
        with:
          context: ./mcp-server/web
          file: ./mcp-server/web/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/ai-web:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_ALGOLIA_APP_ID=${{ secrets.ALGOLIA_APP_ID }}
            NEXT_PUBLIC_ALGOLIA_SEARCH_ONLY_API_KEY=${{ secrets.ALGOLIA_SEARCH_KEY }}
            NEXT_PUBLIC_ALGOLIA_INDEX=${{ secrets.ALGOLIA_INDEX }}

  build-server:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true  # pulls jobs_seed.json etc.

      - uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push server image
        uses: docker/build-push-action@v5
        with:
          context: ./mcp-server
          file: ./mcp-server/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/ai-server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [build-web, build-server]  # wait for both builds to complete
    runs-on: ubuntu-latest
    steps:
      # --- prepare ssh -------------------------------------------
      - name: Install ssh client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Add Lightsail host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.LS_HOST }} >> ~/.ssh/known_hosts

      - name: Write private key
        run: |
          echo "${{ secrets.LS_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      # --- deploy -------------------------------------------------
      - name: Pull images & restart stack on Lightsail
        env:
          HOST: ${{ secrets.LS_HOST }}
          USER: ${{ secrets.LS_USER }}
          ALGOLIA_APP_ID: ${{ secrets.ALGOLIA_APP_ID }}
          ALGOLIA_ADMIN_KEY: ${{ secrets.ALGOLIA_ADMIN_KEY }}
          ALGOLIA_SEARCH_KEY: ${{ secrets.ALGOLIA_SEARCH_KEY }}
          ALGOLIA_INDEX: ${{ secrets.ALGOLIA_INDEX }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Pull latest code and images on the VM
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes "$USER@$HOST" <<VM
            set -e
            cd ~/ai-career-advisor
            git fetch --all
            git reset --hard origin/main
            cd mcp-server
            # flush-left here-doc so no leading spaces go into the file
cat > .env <<'ENVEOF'
ALGOLIA_APP_ID=${ALGOLIA_APP_ID}
ALGOLIA_ADMIN_KEY=${ALGOLIA_ADMIN_KEY}
ALGOLIA_SEARCH_KEY=${ALGOLIA_SEARCH_KEY}
ALGOLIA_INDEX=${ALGOLIA_INDEX}
OPENAI_API_KEY=${OPENAI_API_KEY}
ENVEOF
            cat .env
            docker compose pull web server
            docker compose up -d
          VM
          
          # Verify the deployment
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes $USER@$HOST "cd ~/ai-career-advisor/mcp-server && echo 'Checking .env file:' && cat .env && echo 'Checking container environment:' && docker compose exec web env | grep NEXT_PUBLIC || echo 'No NEXT_PUBLIC vars found'"
          
          # Cleanup
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes $USER@$HOST "cd ~/ai-career-advisor/mcp-server && docker image prune -f && echo 'âœ… Deployment completed successfully!'"